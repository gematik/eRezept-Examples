name: Validate Examples - HAPI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  VALIDATOR_VERSION: 6.5.15
  JAVA_VALIDATOR_DOWNLOAD_LOCATION: "https://github.com/hapifhir/org.hl7.fhir.core/releases/download/$VALIDATOR_VERSION/validator_cli.jar"
  PATH_TO_EXAMPLES: './temp_folder/'
  SUSHI_CONFIG_FILE: './API-Examples/FSH-Files/sushi-config.yaml'
  FHIR_VERSION: "4.0"
  INPUT_JAVA_VALIDATION_OPTIONS: "-tx http://tx.fhir.org -debug -allow-example-urls true"
  DOTNET_VALIDATION_ENABLED: true
  JAVA_VALIDATION_ENABLED: true
  SUSHI_ENABLED: true
  JAVA_SNAPSHOT_ENABLED: false 
  OUTPUT_FAILURE: false
  OUTPUT_FAILURE_MESSAGE: ""
  FIRELY_TERMINAL_VERSION: 3.3.2

jobs:
  CI_EXAMPLES_VALIDATION:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Identify and Copy Changed .json and .xml Files
      - name: Identify and Copy Changed .json and .xml Files
        run: |
          mkdir -p $PATH_TO_EXAMPLES # Create a temp folder
          
          # Get changed files, handling the case where git diff returns nothing
          CHANGED_FILES=$(git diff --name-only origin/main || echo "")
          
          # If there are any changed files, filter and copy them
          if [ -n "$CHANGED_FILES" ]; then
            FILTERED_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(json|xml)$' | grep -v "Negative-Examples/" | grep -v -i "invalid" || echo "")
            
            # Further exclude index.json, files with "negativ" in the name, and XML files containing "soap"
            FINAL_FILES=""
            for file in $FILTERED_FILES; do
              if [[ "$file" != *"index.json" ]] && [[ "$file" != *"package.json" ]] && [[ "$file" != *"negativ"* ]] && ! ( [[ "$file" == *.xml ]] && grep -qi "<soap" "$file" ); then
                FINAL_FILES="$FINAL_FILES"$'\n'"$file"
              fi
            done

            # Trim leading newline from FINAL_FILES
            FINAL_FILES=$(echo "$FINAL_FILES" | sed '/^$/d')

            if [ -n "$FINAL_FILES" ]; then
              echo "Copying changed files that match criteria..."
              echo "$FINAL_FILES" | xargs -d '\n' -I {} cp --parents "{}" "$PATH_TO_EXAMPLES/"
              echo "Files copied successfully."
            else
              echo "No files matching the criteria were changed."
            fi
          else
            echo "No files were changed."
          fi
          
          # Count files to validate, handling empty directory
          FILE_COUNT=$(find $PATH_TO_EXAMPLES -type f 2>/dev/null | wc -l)
          echo "Number of changed files to validate: $FILE_COUNT"
        shell: bash
      
        # Run a shell script to list all files and folders
      - name: List all files and folders
        run: |
          echo "Listing all folders and files in the repository:"
          find . -type d -print | sed 's/^/Directory: /'
          find . -type f -print | sed 's/^/File: /'
          
      # Install Java runtime (only needed if you want to run the offical HL7 Java validator)
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'
        
      # Install .NET runtime
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Install Firely.Terminal
      - name: Install Firely.Terminal
        run: |
          if $DOTNET_VALIDATION_ENABLED || $SUSHI_ENABLED; then
            if ! command -v fhir &> /dev/null
            then
              dotnet tool install --global Firely.Terminal --version $FIRELY_TERMINAL_VERSION > /dev/null
            fi
          fi
        shell: bash

      # Test Firely.Terminal install
      - name: Check Firely Terminal Version
        run: |
          if $DOTNET_VALIDATION_ENABLED || $SUSHI_ENABLED; then
            CHECK_FIRELY_TERMINAL_VERSION=$(fhir -v | tr '\n' ' ') # Print everything in a single line
            echo "FIRELY_TERMINAL_VERSION: $CHECK_FIRELY_TERMINAL_VERSION"
          fi
        shell: bash
    
      # Simplifier Login
      - name: Simplifier login
        run: |
          if $DOTNET_VALIDATION_ENABLED || $SUSHI_ENABLED; then
            fhir login email=$INPUT_SIMPLIFIER_USERNAME password=$INPUT_SIMPLIFIER_PASSWORD
          fi
        shell: bash
        env:
          INPUT_SIMPLIFIER_USERNAME: ${{ secrets.SIMPLIFIER_USERNAME }}
          INPUT_SIMPLIFIER_PASSWORD: ${{ secrets.SIMPLIFIER_PASSWORD }}
       
      # Restore all dependencies listed in the package.json file (need to be on the root level)
      - name: FHIR Dependency restore
        run: |
          if $DOTNET_VALIDATION_ENABLED || $SUSHI_ENABLED; then
            if [ ! -f "$SUSHI_CONFIG_FILE" ]; then
              echo "sushi-config.yaml does not exist. Please add it to the root folder and add all project dependencies."
              exit 1
            fi
          
            # Extract FHIR version from sushi-config.yaml
            fhirVersion=$(grep -oP 'fhirVersion:\s*\K[^\s]+' "$SUSHI_CONFIG_FILE")
            echo "Found FHIR version $fhirVersion in sushi-config.yaml"

            if [[ "$fhirVersion" = "3.0.2" ]]; then
              fhir spec R3
            elif [[ "$fhirVersion" = "4.0.1" ]]; then
              fhir spec R4
            elif [[ "$fhirVersion" = "4.1.0" ]]; then
              fhir spec R4B
            elif [[ "$fhirVersion" = "4.6.0" ]]; then
              fhir spec R5
            else
              echo "This FHIR version is currently not supported.";
              exit 1
            fi

            echo "Attempting to restore package dependencies based on sushi-config.yaml ..."
            fhir config regenerate on
            FHIR_RESTORE=$((fhir restore | tr '\n' ' ')|| true)  # Print everything in a single line
            if [[ "$FHIR_RESTORE" == *"Cannot restore"* ]]; then
              echo $FHIR_RESTORE
              exit 1
            fi
            echo "Restore of dependencies from sushi-config.yaml was successful: $FHIR_RESTORE"
          fi
        shell: bash

      - name: Show FHIR Dependencies
        run: fhir scope && fhir logging Debug
        shell: bash
    # --------------------------------------------------------------------------------------------------- #
    #                                            .NET VALIDATOR                                           #
    # --------------------------------------------------------------------------------------------------- #
                
    # Validate the example resources that have changed with the .NET Validator
      - name: Validate the example resources that have changed with the .NET Validator
        run: |
          if $DOTNET_VALIDATION_ENABLED; then
            echo "Running quality control checks incl. validation based on Firely Terminal ..."

            # Find and validate each file individually
            VALIDATION_OUTPUT=""
            OUTPUT_FAILURE_MESSAGE=""
            
            # Use a temporary file to store the list of files to validate
            TEMP_FILE=$(mktemp)
            find $PATH_TO_EXAMPLES -type f -name "*.json" -o -name "*.xml" > "$TEMP_FILE"
            
            # Read the file line by line without using a pipe
            while read file; do
              echo "Validating $file..."
              VALIDATION_OUTPUT=$(fhir validate "$file" 2>&1)              
              echo "$VALIDATION_OUTPUT" 
              if echo "$VALIDATION_OUTPUT" | grep -q "Result: INVALID"; then
                  # Append the file name and validation output to the failure message
                  # Check if OUTPUT_FAILURE_MESSAGE is empty and add header if it is
                  if [ -z "$OUTPUT_FAILURE_MESSAGE" ]; then
                    OUTPUT_FAILURE_MESSAGE=".NET Validator:"$'\n'"==============="$'\n\n'
                  fi
                  OUTPUT_FAILURE_MESSAGE="${OUTPUT_FAILURE_MESSAGE}File: $file Validation Error: $VALIDATION_OUTPUT
                  
                  "
              fi
            done < "$TEMP_FILE"
            
            # Clean up the temporary file
            rm "$TEMP_FILE"

            # echo "Final failure message:"
            # echo "$OUTPUT_FAILURE_MESSAGE"
            
            # Export the failure message to GITHUB_ENV
            echo "OUTPUT_FAILURE_MESSAGE<<EOF" >> $GITHUB_ENV
            echo "$OUTPUT_FAILURE_MESSAGE" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            # Exit with error if any validation failed
            if [ -n "$OUTPUT_FAILURE_MESSAGE" ]; then
              echo "OUTPUT_FAILURE=true" >> $GITHUB_ENV
              echo "Validation failed"
            else
              echo "OUTPUT_FAILURE=false" >> $GITHUB_ENV
            fi
          else
            echo "OUTPUT_FAILURE=false" >> $GITHUB_ENV
          fi
        shell: bash
        
      - name: Report Success - .NET Validator
        run: |
          if $DOTNET_VALIDATION_ENABLED; then
            echo "Finished validation using .NET validator"
          fi
        shell: bash

    # --------------------------------------------------------------------------------------------------- #
    #                                            JAVA Validator                                           #
    # --------------------------------------------------------------------------------------------------- #
    
    # Offical HL7 Java validator steps

      - name: Remove package cache to enable the Java  validator to create snapshots
        run: |
          if $JAVA_SNAPSHOT_ENABLED; then
            fhirCacheLocation=$(fhir cache location --path)
            rm -rf $fhirCacheLocation
          fi
        shell: bash
    
      - name: Check if Java is installed
        run: |
          if $JAVA_VALIDATION_ENABLED; then
            if ! command -v java &> /dev/null
            then
              echo "java could not be found. Please see actions/setup-java to set it up before running this action."
              exit 1
            fi
          fi
        shell: bash
    
      - name: Download Java Validator
        run: |
          if $JAVA_VALIDATION_ENABLED; then
            CHECK_JAVA_VERSION=$(java -version 2>&1 | head -1 | cut -d'"' -f2)
            echo "JAVA_VERSION: $CHECK_JAVA_VERSION"
            echo "VALIDATOR_VERSION: $VALIDATOR_VERSION"
            JAVA_VALIDATOR_DOWNLOAD_LOCATION=$(eval echo "$JAVA_VALIDATOR_DOWNLOAD_LOCATION")
            echo "JAVA_VALIDATOR_DOWNLOAD_LOCATION: $JAVA_VALIDATOR_DOWNLOAD_LOCATION"
          
            wget -q $JAVA_VALIDATOR_DOWNLOAD_LOCATION -O validator_cli.jar
          fi
        shell: bash
      
      - name: Install jq
        run: |
          if $JAVA_VALIDATION_ENABLED; then 
            sudo apt-get update > /dev/null
            sudo apt-get install --no-install-recommends -y jq findutils curl ca-certificates > /dev/null
          fi
        shell: bash
          
      - name: Validate the example resources that have changed with the Java Validator
        run: |    
          # Define color codes
          ERROR=$'\033[0;31m'
          WARN=$'\033[0;33m'
          INFO=$'\033[0;34m'
          OK=$'\033[0;32m'
          NC=$'\033[0m'
      
          # Initialize failure message variable
          if [ -n "$OUTPUT_FAILURE_MESSAGE" ]; then
            OUTPUT_FAILURE_MESSAGE="${OUTPUT_FAILURE_MESSAGE}"$'\n\n'"Java Validator:"$'\n'"==============="$'\n\n'
          fi
          # OUTPUT_FAILURE_MESSAGE=""
            
          if $JAVA_VALIDATION_ENABLED; then
            if [ ! -f "$SUSHI_CONFIG_FILE" ]; then
              echo "$SUSHI_CONFIG_FILE does not exist. Please add it to the root folder and add all project dependencies."
              exit 1
            fi

            IG_DEPENDENCIES=""

            # Process regular dependencies
            in_dependencies=false
            while IFS= read -r line; do
              # Check if we're in the dependencies section
              if [[ "$line" =~ ^dependencies: ]]; then
                in_dependencies=true
                continue
              fi
              
              # Check if we've moved out of the dependencies section (another top-level key)
              if [[ "$in_dependencies" == true && "$line" =~ ^[a-zA-Z]+: && ! "$line" =~ ^[[:space:]] ]]; then
                in_dependencies=false
              fi
              
              # Process dependency lines
              if [[ "$in_dependencies" == true && "$line" =~ ^[[:space:]]+([a-zA-Z0-9._-]+):[[:space:]]*([a-zA-Z0-9._-]+) ]]; then
                dep_key="${BASH_REMATCH[1]}"
                dep_value="${BASH_REMATCH[2]}"
                IG_DEPENDENCIES="$IG_DEPENDENCIES -ig $dep_key#$dep_value"
              fi
            done < "$SUSHI_CONFIG_FILE"

            # Process zts-dependencies if they exist in the SUSHI config
            in_zts_dependencies=false
            while IFS= read -r line; do
              # Check if we're in the zts-dependencies section
              if [[ "$line" =~ ^zts-dependencies: ]]; then
                in_zts_dependencies=true
                continue
              fi
              
              # Check if we've moved out of the zts-dependencies section
              if [[ "$in_zts_dependencies" == true && "$line" =~ ^[a-zA-Z]+: && ! "$line" =~ ^[[:space:]] ]]; then
                in_zts_dependencies=false
              fi
              
              # Process dependency lines
              if [[ "$in_zts_dependencies" == true && "$line" =~ ^[[:space:]]+([a-zA-Z0-9._-]+):[[:space:]]*([a-zA-Z0-9._-]+) ]]; then
                dep_key="${BASH_REMATCH[1]}"
                dep_value="${BASH_REMATCH[2]}"
                IG_DEPENDENCIES="$IG_DEPENDENCIES -ig $dep_key#$dep_value"
              fi
            done < "$SUSHI_CONFIG_FILE"
            
            echo "Extracted IG dependencies: $IG_DEPENDENCIES"
              
            echo "Validating examples in $PATH_TO_EXAMPLES"
            for p in $PATH_TO_EXAMPLES; 
              do
                
                # Ensure directory ends with "/"
                if [[ ! "$p" =~ .*/$ ]]; then
                  p="$p/"
                fi        
                      
                echo "Loading filenames into memory..."  
                UNESCPAED_IG_DEPENDENCIES=$(echo $IG_DEPENDENCIES | tr -d '"')
                
                # Use find to get files (without piping to avoid subshell issues)
                files=$(find "$GITHUB_WORKSPACE/$p" -type f -name "*.xml" -o -type f -name "*.json")
      
                echo "Commencing with validating"
                if [ -n "$files" ]; then
                  javaValidatorOutput=$(java -jar validator_cli.jar $files -version $FHIR_VERSION $INPUT_JAVA_VALIDATION_OPTIONS $UNESCPAED_IG_DEPENDENCIES || true)
      
                  # Format the output with colors
                  formattedOutput=$(echo "$javaValidatorOutput" | sed -E "
                    s/(:[[:space:]]*)Error([[:space:]]+-)/\1${ERROR}Error${NC}\2/g;
                    s/(:[[:space:]]*)Warning([[:space:]]+-)/\1${WARN}Warning${NC}\2/g;
                    s/(:[[:space:]]*)Information([[:space:]]+-)/\1${INFO}Information${NC}\2/g;
                    s/(-[[:space:]]+)All OK/\1${OK}All OK${NC}/g
                    ")
                  echo -e "$formattedOutput"
                  
                  # Check for errors in the output and capture them
                  if echo "$javaValidatorOutput" | grep -q "Error "; then                    
                    # Extract error messages
                    errorMessages=$(echo "$javaValidatorOutput" | grep -A 1 -E "Error |Validate \/home\/|[*]FAILURE[*]")
                    
                    # Append to the failure message with proper formatting
                    if [ -z "$OUTPUT_FAILURE_MESSAGE" ]; then
                      OUTPUT_FAILURE_MESSAGE="${OUTPUT_FAILURE_MESSAGE}"$'\n\n'"Java Validator:"$'\n'"==============="$'\n\n'
                    fi
                    OUTPUT_FAILURE_MESSAGE="${OUTPUT_FAILURE_MESSAGE}Directory: $p Validation Errors: $errorMessages\n\n"
                  fi
                else
                  echo "No XML or JSON files found in $p"
                fi
              done
            
            # Export the failure message to GITHUB_ENV using proper heredoc syntax
            echo "OUTPUT_FAILURE_MESSAGE<<EOF" >> $GITHUB_ENV
            echo "$OUTPUT_FAILURE_MESSAGE" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
      
            # Set the failure flag if errors were found
            if [ -n "$OUTPUT_FAILURE_MESSAGE" ]; then
              echo "OUTPUT_FAILURE=true" >> $GITHUB_ENV
              echo "Java validation failed with errors"
            fi
          fi
        shell: bash  

      - name: Check whether errors occurred 
        run: |
          if [ "$OUTPUT_FAILURE" = "true" ]; then
            echo "$OUTPUT_FAILURE_MESSAGE"
            exit 1
          else
            echo "No errors found"
          fi 
        
      - name: Cleanup
        if: always()
        run: rm -rf temp_folder
       