name: Validate Examples - HAPI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  VALIDATOR_VERSION: 6.5.11
  JAVA_VALIDATOR_DOWNLOAD_LOCATION: "https://github.com/hapifhir/org.hl7.fhir.core/releases/download/$VALIDATOR_VERSION/validator_cli.jar"
  PATH_TO_EXAMPLES: './temp_folder/'
  FHIR_VERSION: "4.0"
  INPUT_JAVA_VALIDATION_OPTIONS: "-tx http://tx.fhir.org -debug -allow-example-urls true"
  IG_DEPENDENCIES: "-ig de.basisprofil.r4#1.4.0 -ig hl7.fhir.r4.core#4.0.1 -ig kbv.ita.for#1.1.0 -ig kbv.ita.erp#1.1.x -ig de.gematik.erezept-workflow.r4"
  DOTNET_VALIDATION_ENABLED: false
  JAVA_VALIDATION_ENABLED: true
  SUSHI_ENABLED: true
  EXPECTED_FAILS: VALIDATION_CONFORMANCE_DOTNET VALIDATION_CONFORMANCE_JAVA VALIDATION_EXAMPLES_JAVA
  JAVA_SNAPSHOT_ENABLED: false
  #JAVA_VALIDATION_OPTIONS: -allow-example-urls true -output-style raw
  #PATH_TO_EXAMPLES: 'API-Examples/FSH-Files/fsh-generated/resources/' 

jobs:
  CI_EXAMPLES_VALIDATION:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Identify and Copy Changed .json and .xml Files
      - name: Identify and Copy Changed .json and .xml Files
        run: |
          mkdir -p $PATH_TO_EXAMPLES # Create a temp folder
          # git fetch origin main:main
          git diff --name-only origin/main | grep -E '\.(json|xml)$' | xargs -I {} cp {} $PATH_TO_EXAMPLES/
          echo "Number of changed files to validate: " && ls -1 $PATH_TO_EXAMPLES | wc -l

      # Copy 
      - name: Copy files to test with
        run: |
          SOURCE_DIR='API-Examples/2025-01-15/'
          DEST_DIR=$PATH_TO_EXAMPLES  
          mkdir -p $DEST_DIR
          cp -r $SOURCE_DIR/* $DEST_DIR

      - name: List contents of the destination folder
        run: |
          echo "Contents of the destination folder:"
          ls -R $PATH_TO_EXAMPLES
      
      # Install Java runtime (only needed if you want to run the offical HL7 Java validator)
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'
        
      # Install .NET runtime
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Install Firely.Terminal
      - name: Install Firely.Terminal
        run: |
          if $DOTNET_VALIDATION_ENABLED || $SUSHI_ENABLED; then
            if ! command -v fhir &> /dev/null
            then
              dotnet tool install --global Firely.Terminal --version $FIRELY_TERMINAL_VERSION > /dev/null
            fi
          fi
        shell: bash
        env:
          FIRELY_TERMINAL_VERSION: 3.3.2
          #INPUT_DOTNET_VALIDATION_ENABLED: $DOTNET_VALIDATION_ENABLED
          #INPUT_SUSHI_ENABLED: $SUSHI_ENABLED

      # Test Firely.Terminal install
      - name: Check Firely Terminal Version
        run: |
          if $DOTNET_VALIDATION_ENABLED || $SUSHI_ENABLED; then
            CHECK_FIRELY_TERMINAL_VERSION=$(fhir -v | tr '\n' ' ') # Print everything in a single line
            echo "FIRELY_TERMINAL_VERSION: $CHECK_FIRELY_TERMINAL_VERSION"
          fi
        shell: bash
        #env:
          #INPUT_DOTNET_VALIDATION_ENABLED: $DOTNET_VALIDATION_ENABLED
          #INPUT_SUSHI_ENABLED: $SUSHI_ENABLED
    
      # Simplifier Login
      - name: Simplifier login
        run: |
          if $DOTNET_VALIDATION_ENABLED || $SUSHI_ENABLED; then
            fhir login email=$INPUT_SIMPLIFIER_USERNAME password=$INPUT_SIMPLIFIER_PASSWORD
          fi
        shell: bash
        env:
          #INPUT_DOTNET_VALIDATION_ENABLED: $DOTNET_VALIDATION_ENABLED
          #INPUT_SUSHI_ENABLED: $SUSHI_ENABLED
          INPUT_SIMPLIFIER_USERNAME: ${{ secrets.SIMPLIFIER_USERNAME }}
          INPUT_SIMPLIFIER_PASSWORD: ${{ secrets.SIMPLIFIER_PASSWORD }}
       
      # Restore all dependencies listed in the package.json file (need to be on the root level)
      - name: FHIR Dependency restore
        run: |
          if $DOTNET_VALIDATION_ENABLED || $SUSHI_ENABLED; then
            if [ ! -f "package.json" ]; then
              echo "package.json does not exist. Please add it to the root folder and add all project dependencies."
              exit 1
            fi
          
            fhirVersions=("3.0.2" "4.0.1" "4.1.0" "4.6.0")
            for fhirVersion in ${fhirVersions[@]}; do
              fhirVersionFoundInPackageJson=$(cat package.json | jq '.fhirVersions | index('\"$fhirVersion\"')')
              if [[ ! "$fhirVersionFoundInPackageJson" = null ]]; then
                echo "Found FHIR version $fhirVersion in package.json"
                if [[ "$fhirVersion" = "3.0.2" ]]; then
                  fhir spec R3
                  break
                elif [[ "$fhirVersion" = "4.0.1" ]]; then
                  fhir spec R4
                  break
                elif [[ "$fhirVersion" = "4.1.0" ]]; then
                  fhir spec R4B
                  break
                elif [[ "$fhirVersion" = "4.6.0" ]]; then
                  fhir spec R5
                  break
                else
                  echo "This FHIR version is currently not supported.";
                  exit 1
                fi
              fi
            done

            echo "Attempting to restore package dependencies based on package.json ..."
            fhir config regenerate on
            FHIR_RESTORE=$((fhir restore | tr '\n' ' ')|| true)  # Print everything in a single line
            if [[ "$FHIR_RESTORE" == *"Cannot restore"* ]]; then
              echo $FHIR_RESTORE
              exit 1
            fi
            echo "Restore of package.json was successful: $FHIR_RESTORE"
          fi
        shell: bash
        #env:
          #INPUT_DOTNET_VALIDATION_ENABLED: $DOTNET_VALIDATION_ENABLED
          #INPUT_SUSHI_ENABLED: $SUSHI_ENABLED

    # --------------------------------------------------------------------------------------------------- #
    #                                            .NET VALIDATOR                                           #
    # --------------------------------------------------------------------------------------------------- #
                
    # Run Quality Control checks incl. validation
      - name: Run Quality Control checks
        run: |
          if $DOTNET_VALIDATION_ENABLED; then
            echo "Running quality control checks incl. validation based on Firely Terminal ..."
            if echo $EXPECTED_FAILS | grep -w -q VALIDATION_CONFORMANCE_DOTNET; then
              fhir check $PATH_TO_QUALITY_CONTROL_RULES
            else
              fhir check --fail $PATH_TO_QUALITY_CONTROL_RULES
            fi
          fi
        shell: bash
        #env:
          #INPUT_EXPECTED_FAILS: $EXPECTED_FAILS 
          #INPUT_DOTNET_VALIDATION_ENABLED: $DOTNET_VALIDATION_ENABLED
          #INPUT_PATH_TO_QUALITY_CONTROL_RULES: ${{ inputs.PATH_TO_QUALITY_CONTROL_RULES }}
        
      - name: Report Success - .NET Validator
        run: |
          if $DOTNET_VALIDATION_ENABLED; then
            echo "Finished validation using .NET validator (Conformance resources) ..."
          fi
        shell: bash
        #env:
          #INPUT_DOTNET_VALIDATION_ENABLED: $DOTNET_VALIDATION_ENABLED 

    # --------------------------------------------------------------------------------------------------- #
    #                                            JAVA Validator                                           #
    # --------------------------------------------------------------------------------------------------- #
    
    # Offical HL7 Java validator steps

      - name: Remove package cache to enable the Java  validator to create snapshots
        run: |
          if $JAVA_SNAPSHOT_ENABLED; then
            fhirCacheLocation=$(fhir cache location --path)
            rm -rf $fhirCacheLocation
          fi
        shell: bash
        #env:
          #INPUT_JAVA_SNAPSHOT_ENABLED: $JAVA_SNAPSHOT_ENABLED
    
      - name: Check if Java is installed
        run: |
          if $JAVA_VALIDATION_ENABLED; then
            if ! command -v java &> /dev/null
            then
              echo "java could not be found. Please see actions/setup-java to set it up before running this action."
              exit 1
            fi
          fi
        shell: bash
        #env:
          #INPUT_JAVA_VALIDATION_ENABLED: $JAVA_VALIDATION_ENABLED
    
      - name: Download Java Validator
        run: |
          if $JAVA_VALIDATION_ENABLED; then
            CHECK_JAVA_VERSION=$(java -version 2>&1 | head -1 | cut -d'"' -f2)
            echo "JAVA_VERSION: $CHECK_JAVA_VERSION"
            echo "VALIDATOR_VERSION: $VALIDATOR_VERSION"
            JAVA_VALIDATOR_DOWNLOAD_LOCATION=$(eval echo "$JAVA_VALIDATOR_DOWNLOAD_LOCATION")
            echo "JAVA_VALIDATOR_DOWNLOAD_LOCATION: $JAVA_VALIDATOR_DOWNLOAD_LOCATION"
          
            wget -q $JAVA_VALIDATOR_DOWNLOAD_LOCATION -O validator_cli.jar
          fi
        shell: bash
        #env:
          #JAVA_VALIDATOR_VERSION: $VALIDATOR_VERSION
          #JAVA_VALIDATOR_DOWNLOAD_LOCATION: $JAVA_VALIDATOR_DOWNLOAD_LOCATION
          #INPUT_JAVA_VALIDATION_ENABLED: $JAVA_VALIDATION_ENABLED
      
      - name: Install jq
        run: |
          if $JAVA_VALIDATION_ENABLED; then 
            sudo apt-get update > /dev/null
            sudo apt-get install --no-install-recommends -y jq findutils curl ca-certificates > /dev/null
          fi
        shell: bash
        #env:
          #INPUT_JAVA_VALIDATION_ENABLED: $JAVA_VALIDATION_ENABLED
          
      - name: Validate all example resources in scope of the repository
        run: |    
          # Define color codes
          ERROR=$'\033[0;31m'
          WARN=$'\033[0;33m'
          INFO=$'\033[0;34m'
          OK=$'\033[0;32m'
          NC=$'\033[0m'
            
          if $JAVA_VALIDATION_ENABLED; then
            IG_DEPENDENCIES=$(jq -r '(.dependencies + .["zts-dependencies"]) | to_entries | map("-ig " + .key + "#" + .value) | join(" ")' package.json)
            #for p in $INPUT_PATH_TO_CONFORMANCE_RESOURCES; # Get combined path to conformance resources, we want to validate against the current version of the conformance resources
              #do  
                #COMBINED_IG_PARAMETERS+="-ig $GITHUB_WORKSPACE/$p "
              #done
            
            echo "Validating examples in $PATH_TO_EXAMPLES"
            for p in $PATH_TO_EXAMPLES; 
              do
                
                # Ensure directory ends with "/"
                if [[ ! "$p" =~ .*/$ ]]; then
                  p="$p/"
                fi
                echo "Validating $p*.xml"
                UNESCPAED_IG_DEPENDENCIES=$(echo $IG_DEPENDENCIES | tr -d '"')

                # Find all .xml and .json files recursively
                files=$(find $GITHUB_WORKSPACE/$p -type f $$-name "*.xml" -o -name "*.json"$$)
                ls $files
                
                if echo $EXPECTED_FAILS | grep -w -q VALIDATION_EXAMPLES_JAVA; then
                  javaValidatorOutput=$(java -jar validator_cli.jar $files -version $FHIR_VERSION $INPUT_JAVA_VALIDATION_OPTIONS $UNESCPAED_IG_DEPENDENCIES || true)
                else
                  javaValidatorOutput=$(java -jar validator_cli.jar $files -version $FHIR_VERSION $INPUT_JAVA_VALIDATION_OPTIONS $UNESCPAED_IG_DEPENDENCIES $COMBINED_IG_PARAMETERS)
                fi
    
                javaValidatorOutput=$(echo "$javaValidatorOutput" | sed -E "
                  s/(:[[:space:]]*)Error([[:space:]]+-)/\1${ERROR}Error${NC}\2/g;
                  s/(:[[:space:]]*)Warning([[:space:]]+-)/\1${WARN}Warning${NC}\2/g;
                  s/(:[[:space:]]*)Information([[:space:]]+-)/\1${INFO}Information${NC}\2/g;
                  s/(-[[:space:]]+)All OK/\1${OK}All OK${NC}/g
                ")
                echo -e "$javaValidatorOutput"
                
              done
            fi
        shell: bash
        #env:          
          #PATH_TO_EXAMPLES: $PATH_TO_EXAMPLES
          #FHIR_VERSION: $FHIR_VERSION
          #INPUT_JAVA_VALIDATION_ENABLED: $JAVA_VALIDATION_ENABLED
          #INPUT_EXPECTED_FAILS: $EXPECTED_FAILS
          #INPUT_JAVA_VALIDATION_OPTIONS: $INPUT_JAVA_VALIDATION_OPTIONS 
          #INPUT_PATH_TO_CONFORMANCE_RESOURCES: ${{ inputs.PATH_TO_CONFORMANCE_RESOURCES }}
  
      #- name: Check for Uncommitted Changes
      #  run: |
      #    git diff --exit-code 'API-Examples/FSH-Files/fsh-generated/resources'|| (echo "Es gibt Änderungen durch die Pipeline. Lokale Sushi Konfiguration prüfen!" && exit 1)              

      - name: Cleanup
        if: always()
        run: rm -rf temp_folder
